{"version":3,"sources":["ViewerExtension/components/RankingsEntry/RankingsEntry.component.tsx","ViewerExtension/components/RankingsTable/RankingsTable.component.tsx","ViewerExtension/components/TitleImg/TitleImg.component.tsx","ViewerExtension/components/TitleText/TitleText.component.tsx","ViewerExtension/components/TitleHeader/TitleHeader.component.tsx","ViewerExtension/components/ColumnsHeader/ColumnsHeader.component.tsx","ViewerExtension/components/RankingsHeader/RankingsHeader.component.tsx","shared/components/ColoredScrollbar/ColoredScrollbar.component.tsx","ViewerExtension/components/ViewerLayout/ViewerLayout.component.tsx","ViewerExtension/components/Loading/Loading.component.tsx","App.tsx","shared/services/TwitchContext/TwitchContext.service.ts","reportWebVitals.ts","index.tsx"],"names":["RankingsEntry","props","className","username","value","RankingsTable","model","entries","map","entry","key","TitleImg","src","titleUrl","alt","TitleText","text","TitleHeader","useMeasure","titleDiv","bounds","setTitleHeight","useEffect","height","ref","titleText","ColumnsHeader","category","isColumnHeadersTop","width","style","FullHeader","layoutWidth","RankingsHeader","headerUrl","ColoredScrollbars","state","top","handleUpdate","bind","renderView","renderThumb","values","this","setState","renderThumbHorizontal","renderThumbVertical","onUpdate","Component","ViewerLayout","useState","setColumnHeadersTop","titleHeight","setLayoutWidth","layoutDiv","useCallback","node","console","log","clientWidth","rhProps","data","config","onScroll","event","target","scrollTop","Loading","defaultState","dataUrl","darkMode","App","setData","url","isLoading","setIsLoading","a","sleep","Promise","resolve","require","result","fetchData","theme","setTheme","callback","context","changed","includes","window","Twitch","ext","onContext","ms","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0281545b.chunk.js","sourcesContent":["import './RankingsEntry.css';\r\nimport { DataEntry } from \"../../../shared/data/data.state\";\r\n\r\n/** \r\n * @description A single table entry of the rankings.\r\n */\r\nexport function RankingsEntry(props: DataEntry) {\r\n    return (\r\n        <li className=\"entry\">\r\n            <span>{props.username}</span>\r\n            <span>{props.value}</span>\r\n        </li>)\r\n}","import './RankingsTable.css';\r\nimport { DataState } from \"../../../shared/data/data.state\";\r\nimport { RankingsEntry } from \"../RankingsEntry/RankingsEntry.component\";\r\n\r\n/** \r\n * @description A table of rankings entries.\r\n */\r\nexport function RankingsTable(props: { model: DataState }) {    \r\n    return (\r\n        <main className=\"entries\">\r\n            <ul>\r\n                { \r\n                    props.model.entries?.map(entry=>\r\n                        <RankingsEntry {...entry} key={entry.username}/>)\r\n                }\r\n            </ul>\r\n        </main>\r\n    );\r\n}\r\n","/**\r\n * @description Render an image inside <h1> tags.\r\n * @param props The url of the image.\r\n */\r\nexport function TitleImg (props:{ titleUrl: string }){ \r\n    return (\r\n    <h1>\r\n        <img className=\"title-img\" src={props.titleUrl} alt=\"\"/>\r\n    </h1>);\r\n}\r\n","import './TitleText.css';\r\n\r\n/**\r\n * @description Display text inside <h1> tags.\r\n * @param text The text to display. \r\n */\r\nexport function TitleText ({text = \"untitled\"}: { text?: string }) {  \r\n    return (<h1 className=\"titleTextHeader\">{text}</h1>); \r\n}\r\n","import { useEffect } from \"react\";\r\nimport useMeasure from 'react-use-measure'\r\nimport { RankingsHeaderProps } from \"../RankingsHeader/RankingsHeader.props\";\r\nimport { TitleImg } from \"../TitleImg/TitleImg.component\";\r\nimport { TitleText } from \"../TitleText/TitleText.component\";\r\n\r\n\r\n/**\r\n * @description Render the title text or image and track\r\n * the height to report back to the parent container.\r\n */\r\nexport function TitleHeader(props: RankingsHeaderProps) {\r\n\r\n    /**\r\n     * measure the height of the title height\r\n     * for hit boxing the column headers \r\n     */\r\n\r\n    const [titleDiv, bounds] = useMeasure();\r\n    const setTitleHeight = props.setTitleHeight;\r\n    \r\n    useEffect(()=>{\r\n        setTitleHeight(bounds.height)\r\n    },[bounds.height, setTitleHeight]);\r\n    \r\n    return (\r\n        <div ref={titleDiv}>\r\n            {\r\n                props.titleUrl?\r\n                    <TitleImg titleUrl={props.titleUrl}/>:\r\n                    <TitleText text={props.titleText}/>\r\n            } \r\n        </div>\r\n    );\r\n}","import './ColumnsHeader.css';\r\n\r\n/**\r\n * @description The table entry column headers renderer. \r\n */\r\nexport function ColumnsHeader ({ category , isColumnHeadersTop, width }: { \r\n    category: string, \r\n    isColumnHeadersTop: boolean, \r\n    width: number\r\n}) {\r\n    return (\r\n        <h2 className={\r\n                isColumnHeadersTop?\r\n                    \"categories-header fixed\" : \r\n                    \"categories-header\"\r\n                }\r\n            style={ {width: width} }>\r\n            <div>\r\n                <span>User Name</span>\r\n                <span>{category}</span>\r\n            </div>\r\n        </h2>);\r\n}\r\n","import './RankingsHeader.css';\r\nimport { RankingsHeaderProps } from './RankingsHeader.props';\r\nimport { TitleHeader } from '../TitleHeader/TitleHeader.component';\r\nimport { TitleImg } from '../TitleImg/TitleImg.component';\r\nimport { ColumnsHeader } from '../ColumnsHeader/ColumnsHeader.component';\r\n\r\nconst FullHeader = (props: RankingsHeaderProps) => (\r\n    <>\r\n        <TitleHeader {...props}/>\r\n        <ColumnsHeader \r\n            category={props.category} \r\n            isColumnHeadersTop={props.isColumnHeadersTop}  \r\n            width={props.layoutWidth} />\r\n    </>);\r\n\r\n/**\r\n * @description If a headerUrl is passed render only it \r\n * as the entire header.  Otherwise render a title header with\r\n * the chosen text or image url and column headers as the chosen\r\n * text.\r\n */\r\nexport function RankingsHeader(props: RankingsHeaderProps) {\r\n    return (\r\n        <header className=\"header\"> \r\n            {\r\n                props.headerUrl ?\r\n                    <TitleImg titleUrl={props.headerUrl}/>: \r\n                    <FullHeader {...props}/>\r\n            }\r\n        </header>\r\n    );\r\n}\r\n","import './ColoredScrollbar.css';\r\nimport { Component } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars-2';\r\nimport { ColoredScrollbarProps } from './ColoredScrollbar.props';\r\nimport { ColoredScrollbarState } from './ColoredScrollbar.state';\r\n\r\n/**\r\n * @class ColoredScrollbars\r\n * @description extends Scrollbars to customize the color\r\n * of the scroll widget.\r\n */\r\nexport class ColoredScrollbars extends \r\n    Component<ColoredScrollbarProps, ColoredScrollbarState> {\r\n\r\n    constructor(props: ColoredScrollbarProps) {\r\n        super(props);\r\n        this.state = { top: 0 };\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.renderView = this.renderView.bind(this);\r\n        this.renderThumb = this.renderThumb.bind(this);\r\n    }\r\n\r\n    handleUpdate(values: ColoredScrollbarState) {\r\n        const { top } = values;\r\n        this.setState({ top });\r\n    }\r\n\r\n    renderView({ style, ...props }: ColoredScrollbarProps) {\r\n        return (\r\n            <div\r\n                style={{ ...style }}\r\n                {...props}/>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * The scrollbar class implements the desired look and feel \r\n     */\r\n    renderThumb({ style, ...props }: ColoredScrollbarProps) {\r\n        return (\r\n            <div className=\"scrollbar\"\r\n                style={{ ...style }}\r\n                {...props}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Scrollbars\r\n                renderView={this.renderView}\r\n                renderThumbHorizontal={this.renderThumb}\r\n                renderThumbVertical={this.renderThumb}\r\n                onUpdate={this.handleUpdate}\r\n                {...this.props}/>\r\n        );\r\n    }\r\n}","import './ViewerLayout.css';\r\nimport { RankingsTable } from \"../RankingsTable/RankingsTable.component\";\r\nimport { RankingsHeader } from \"../RankingsHeader/RankingsHeader.component\";\r\nimport { RankingsHeaderProps } from \"../RankingsHeader/RankingsHeader.props\";\r\nimport { AppState } from '../../../App.state';\r\nimport { useCallback, useState } from 'react';\r\nimport { ColoredScrollbars } from '../../../shared/components/ColoredScrollbar/ColoredScrollbar.component';\r\n\r\n/**\r\n * @description The viewer layout component is responsible for orchestrating the\r\n * layout of the entire extension in viewer mode.\r\n * @param props The entire AppState is passed to the layout to divide\r\n * between the headers and the content body.\r\n */\r\nexport function ViewerLayout(props: AppState) {\r\n    /**\r\n     * Track when the column headers should become sticky\r\n     * to the top of the view or should attach themselves to\r\n     * the bottom of the title box.\r\n     */\r\n\r\n    const [isColumnHeadersTop, setColumnHeadersTop] = useState(false);\r\n    const [titleHeight, setTitleHeight] = useState(1000);\r\n\r\n    /**\r\n     * Hit testing for the column headers.\r\n     */\r\n    const handleScrolling = (event: any) => { \r\n        if(!isColumnHeadersTop && event.target.scrollTop >= titleHeight) {\r\n            setColumnHeadersTop(true);\r\n        }\r\n        else if(isColumnHeadersTop && event.target.scrollTop < titleHeight) {\r\n            setColumnHeadersTop(false);\r\n        } \r\n    };\r\n\r\n    /**\r\n     * Determine the width to use for the column headers when\r\n     * they transition to fixed position. \r\n     */\r\n\r\n    const [layoutWidth, setLayoutWidth] = useState(1100);\r\n    const layoutDiv = useCallback(node => {\r\n        if (node !== null) {\r\n            console.log(\"width: \", node.clientWidth);\r\n            setLayoutWidth(node.clientWidth);\r\n        }\r\n    }, []);\r\n\r\n    /**\r\n     * Make props for the header \r\n     */\r\n\r\n    const rhProps: RankingsHeaderProps = {\r\n        isColumnHeadersTop: isColumnHeadersTop,\r\n        category: props.data.category,\r\n        titleText: props.config.titleText,\r\n        titleUrl: props.config.titleUrl,\r\n        headerUrl: props.config.headerUrl,\r\n        layoutWidth: layoutWidth,\r\n        setTitleHeight: setTitleHeight\r\n    }\r\n    \r\n\r\n    return (\r\n        <ColoredScrollbars style={{ height: 500 }}\r\n            onScroll={handleScrolling}>\r\n            <div className=\"layout\" ref={layoutDiv} >\r\n                <RankingsHeader {...rhProps}/>\r\n                <RankingsTable model={props.data} />\r\n            </div>\r\n        </ColoredScrollbars>\r\n    );\r\n}\r\n","import './Loading.css';\r\n\r\nexport function Loading() {\r\n    return (\r\n        <div className=\"load-container indicator\">\r\n            <div className=\"loader\">Loading...</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { ViewerLayout } from './ViewerExtension/components/ViewerLayout/ViewerLayout.component';\nimport { Loading } from './ViewerExtension/components/Loading/Loading.component';\nimport { AppState } from './App.state';\nimport { registerContextListener } from './shared/services/TwitchContext/TwitchContext.service';\n\nconst defaultState: AppState = { data: { category: 'default', entries: [] }, config: { dataUrl: '' } };\n\nconst lightMode = 'light-mode';\nconst darkMode = 'dark-mode';\n\nfunction App() {\n  const [data, setData] = useState<AppState>(defaultState);\n  const [url, setUrl] = useState('/config/user-bits.json');\n  const [isLoading, setIsLoading] = useState(false);\n \n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      \n      await sleep(1000);\n\n      const result = await Promise.resolve(\n        require(\"./test/giftedSubs.test.json\")\n      );\n\n      setData({ \n        data: result, \n        config: { dataUrl: '', \n          titleText: \"Hall of Fame\"\n        } \n      });\n      setIsLoading(false);\n    };\n \n    fetchData();\n  }, [url]);\n\n  const [theme, setTheme] = useState<string>(darkMode);\n\n  useEffect(() => {\n    console.log('context use effect');\n    registerContextListener((context, changed)=>{\n      if(changed.includes('theme')) {\n        if(context.theme === 'light') {\n          setTheme(lightMode);\n        }\n        if(context.theme === 'dark') {\n          setTheme(darkMode);\n        }\n      }\n    });\n  }, []);\n  \n    \n  return (\n    <div className={`app-container ${theme}`}>\n      {\n        isLoading? \n          <Loading/>: \n          <ViewerLayout {...data}></ViewerLayout>\n      }\n    </div>\n  );\n}\n\nexport default App;\n\n\nfunction sleep(ms: number) {\n  // add ms millisecond timeout before promise resolution\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\n\n","type ContextCallback = <C extends Partial<Twitch.ext.Context>>\r\n    (context: C,changed: readonly (keyof C)[])=>void;\r\n\r\nexport function registerContextListener(callback: ContextCallback) {\r\n    window.Twitch.ext.onContext(callback);\r\n    \r\n    /* Test theme context change */\r\n    /*\r\n    setTimeout(()=>{\r\n        callback({ theme: 'light'},['theme'])\r\n    },5000);\r\n    setTimeout(()=>{\r\n        callback({ theme: 'dark'},['theme'])\r\n    },10000);\r\n    */\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}