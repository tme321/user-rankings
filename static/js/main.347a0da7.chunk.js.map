{"version":3,"sources":["Config/defaults/ColorModesConfig.ts","Context/Colors.context.ts","Views/Viewer/components/RankingsEntry/RankingsEntry.component.tsx","Views/Viewer/components/RankingsTable/RankingsTable.component.tsx","Views/Viewer/components/TitleImg/TitleImg.component.tsx","Views/Viewer/components/ColumnsHeader/ColumnsHeader.component.tsx","Views/Viewer/components/TitleText/TitleText.component.tsx","Views/Viewer/components/RankingsHeader/RankingsHeader.component.tsx","shared/helpers/nullToString.ts","Views/Viewer/components/ViewerLayout/ViewerLayout.component.tsx","Views/Config/components/RadioSelectGroup/RadioSelectGroup.component.tsx","Config/helpers/copyConfig.ts","Views/Config/components/ColorPickerButton/ColorPickerButton.helpers.ts","Views/Config/components/ColorPickerButton/ColorPickerButton.component.tsx","Views/Config/components/ColorPickerWidget/ColorPickerWidget.component.tsx","Views/Config/components/ThemeConfigEditor/ThemeConfigEditor.component.tsx","Views/Config/components/ConfigLayout/ConfigLayout.component.tsx","shared/components/TabSelector/TabSelector.component.tsx","shared/components/TabSelectors/TabSelectors.component.tsx","shared/components/ColoredScrollbar/ColoredScrollbar.component.tsx","Views/Dashboard/components/EditTableEntry/EditTableEntry.component.tsx","Views/Dashboard/components/EditDataTable/EditDataTable.component.tsx","Views/Dashboard/components/DashboardLayout/DashboardLayout.component.tsx","shared/defaults/authToken.ts","shared/hooks/TwitchExtContext.hook.ts","shared/services/TwitchContext/TwitchContext.service.ts","shared/hooks/TwitchPanelExtension.hook.ts","shared/hooks/TwitchExtAuth.hook.ts","shared/helpers/modCheck.ts","shared/hooks/TwitchExtConfig.hook.ts","Config/defaults/ConfigState.ts","Config/helpers/isAConfig.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultColorModesConfig","light","background","accent","text","altText","link","textOverlay","dark","modes","ColorsContext","React","createContext","RankingsEntry","username","value","style","theme","useContext","className","borderColor","RankingsTable","tableData","entries","map","entry","index","key","color","TitleImg","titleUrl","src","alt","ColumnsHeader","category","usersColumnText","isColumnHeadersTop","width","backgroundColor","TitleText","RankingsHeader","props","selectedHeaderType","titleText","layoutWidth","headerUrl","headerLayout","nullToString","maybeNull","undefined","ViewerLayout","config","useState","setColumnHeadersTop","titleHeight","setTitleHeight","rhProps","categoryText","viewContainer","useRef","useEffect","current","setProperty","ref","onScroll","event","target","scrollTop","overflow","RadioSelectGroup","title","groupName","items","currentSelection","handleSelection","radioButtons","item","type","id","name","checked","selectionValue","onChange","selectedValue","htmlFor","label","contents","content","copyConfig","themes","convertStringToRGBColor","colorsMatch","exec","r","Number","parseInt","groups","g","b","a","convertRGBColorToString","ColorPickerButton","displayColorPicker","buttonState","setButtonState","selectedColorStyle","onClick","rgb","handleChange","ColorPickerWidget","labelColor","handleColorChange","ThemeConfigEditor","colorChangeHandlers","ConfigLayout","handleSaveConfig","currentConfig","setConfig","isFormPristine","setFormPristine","prevConfig","newConfig","ColorsRadioGroupContent","e","onSubmit","preventDefault","height","disabled","dataUrl","select","TabSelector","toggledColor","isSelected","handleSelected","buttonStyle","setButtonStyle","onMouseEnter","onMouseLeave","TabSelectors","tabs","tabNames","useMemo","Object","keys","length","selectedTab","setSelectedTab","tabSelectors","tabName","ColoredScrollbars","state","top","handleUpdate","bind","renderView","renderThumb","values","this","setState","overflowX","thumbColor","renderThumbHorizontal","renderThumbVertical","onUpdate","Component","EditTableEntry","gotoUserEntry","valueInputRef","useCallback","focus","focusValue","display","justifyContent","paddingRight","defaultValue","paddingLeft","EditDataTable","fontSize","textAlign","DashboardLayout","gotoState","setGotoState","gotoInput","onFocus","onKeyPress","placeholder","defaultAuthToken","channelId","clientId","token","userId","useTwitchContext","mode","twitchTheme","setTwitchTheme","extensionMode","setExtensionMode","handlers","contextCallback","context","changed","forEach","val","handleTwitchExtContextChanges","window","Twitch","ext","onContext","registerTwitchExtContextHandlers","newTheme","newMode","listenBroadcast","message","msg","JSON","parse","rig","log","useTwitchPanelExtension","defaultConfig","isConfig","viewMode","authState","isMod","isAuthed","setAuthState","onAuthorized","auth","decodedToken","decode","role","opaque_user_id","useTwitchExtAuth","twitchConfig","setTwitchConfig","twitchExt","configuration","onChanged","broadcaster","maybeConfig","version","set","stringify","useTwitchExtConfig","saveTwitchConfig","isLoading","listen","unlisten","defaultConfigState","isAConfig","defaultTableData","App","initialMode","location","pathname","data","setData","url","saveConfig","Promise","resolve","require","result","fetchData","Provider","layoutMode","renderConfig","renderLayout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.347a0da7.chunk.js","sourcesContent":["import { ColorModesModel } from \"../model/ColorModes.model\";\r\n\r\n/**\r\n * @description - These colors are taken from the official\r\n * twitch guidelines at \r\n * https://dev.twitch.tv/docs/extensions/designing#panel-extension-guidelines\r\n */\r\nexport const defaultColorModesConfig: ColorModesModel = {\r\n    light: {\r\n        background: `rgba(${0xff},${0xff},${0xff},${0x01})`,\r\n        accent: `rgba(${0x64},${0x41},${0xa4},${0x01})`, \r\n        text: `rgba(${0x23},${0x21},${0x27},${0x01})`,\r\n        altText: `rgba(${0x40},${0x40},${0x40},${0x01})`,\r\n        link: `rgba(${0x64},${0x41},${0xa4},${0x01})`,\r\n        textOverlay: `rgba(${0xe5},${0xe3},${0xe8},${0x01})`,\r\n    },\r\n    dark: {\r\n        background: `rgba(${0x20},${0x1c},${0x2b},${0x01})`,\r\n        accent: `rgba(${0x64},${0x41},${0xa4},${0x01})`,\r\n        text: `rgba(${0xe5},${0xe3},${0xe8},${0x01})`,\r\n        altText: `rgba(${0xb5},${0xb3},${0xb8},${0x01})`,\r\n        link: `rgba(${0xe2},${0xdb},${0xf0},${0x01})`,\r\n        textOverlay: `rgba(${0xe5},${0xe3},${0xe8},${0x01})`,\r\n    }\r\n}","import React from 'react';\r\nimport { defaultColorModesConfig } from '../Config/defaults/ColorModesConfig';\r\nimport { ColorModesModel } from '../Config/model/ColorModes.model';\r\n/*\r\nexport type ColorsContextType = {\r\n    background: string,\r\n    acccent: string,\r\n    text: string,\r\n    altText: string,\r\n    link: string,\r\n    textOverlay: string,\r\n};\r\n\r\nexport type ColorModesContextType = {\r\n    dark: ColorsContextType;\r\n    light: ColorsContextType;\r\n}\r\n*/\r\n\r\nexport const modes: ColorModesModel = defaultColorModesConfig;\r\n\r\nexport const ColorsContext = React.createContext(modes.dark);","import React, { CSSProperties, useContext } from 'react';\r\nimport './RankingsEntry.css';\r\nimport { ColorsContext } from '../../../../Context/Colors.context';\r\nimport { RankingsEntryProps } from './RankingsEntry.props';\r\n\r\n/** \r\n * @description A single table entry of the rankings.\r\n */\r\nexport function RankingsEntry({username, value, style}: RankingsEntryProps) {\r\n    const theme = useContext(ColorsContext);\r\n    return (\r\n        <li className=\"entry\" \r\n            style={{ ...style, borderColor: theme.accent }}>\r\n            <span>{username}</span>\r\n            <span>{value}</span>\r\n        </li>)\r\n}","import React, { useContext } from 'react';\r\nimport './RankingsTable.css';\r\nimport { RankingsEntry } from \"../RankingsEntry/RankingsEntry.component\";\r\nimport { ColorsContext } from '../../../../Context/Colors.context';\r\nimport { RankingsTableProps } from './RankingsTable.props';\r\n\r\n/** \r\n * @description A table of rankings entries.\r\n */\r\nexport function RankingsTable({ tableData }: RankingsTableProps) {    \r\n\r\n    const theme = useContext(ColorsContext);\r\n\r\n    const entries = tableData.entries?.map((entry,index)=>\r\n        <RankingsEntry {...entry} \r\n            key={entry.username} \r\n            style={{ color:`${index%2?theme.altText:theme.text}` }}/>);\r\n\r\n    return (\r\n        <main>\r\n            <ul className=\"entries\">\r\n                {entries}\r\n            </ul>\r\n        </main>\r\n    );\r\n}\r\n","/**\r\n * @description Render an image inside <h1> tags.\r\n * @param props The url of the image.\r\n */\r\nexport function TitleImg ({titleUrl}:{ titleUrl: string }){ \r\n    return (\r\n    <h1>\r\n        <img className=\"title-img\" src={titleUrl} alt=\"\"/>\r\n    </h1>);\r\n}\r\n","import React, { useContext } from 'react';\r\nimport './ColumnsHeader.css';\r\nimport { ColorsContext } from '../../../../Context/Colors.context';\r\nimport { ColumnHeaderProps } from './ColumnsHeader.props';\r\n\r\n/**\r\n * @description The table entry column headers renderer. \r\n */\r\nexport function ColumnsHeader ({ \r\n    category,\r\n    usersColumnText, \r\n    isColumnHeadersTop, \r\n    width }: ColumnHeaderProps) {\r\n\r\n    const theme = useContext(ColorsContext);\r\n    \r\n    return (\r\n        <h2 className={\r\n                isColumnHeadersTop?\r\n                    \"categories-header fixed\" :\r\n                    \"categories-header\"\r\n                }\r\n            style={{ \r\n                /*width: width,*/ \r\n                backgroundColor: theme.background \r\n            }}>\r\n            <div>\r\n                <span>{usersColumnText}</span>\r\n                <span>{category}</span>\r\n            </div>\r\n        </h2>);\r\n}\r\n","import './TitleText.css';\r\n\r\n/**\r\n * @description Display text inside <h1> tags.\r\n * @param text The text to display. \r\n */\r\nexport function TitleText ({text}: { text: string }) {  \r\n    return (<h1 className=\"titleTextHeader\">{text}</h1>); \r\n}\r\n","import React from 'react';\r\nimport './RankingsHeader.css';\r\nimport { RankingsHeaderProps } from './RankingsHeader.props';\r\nimport { TitleImg } from '../TitleImg/TitleImg.component';\r\nimport { ColumnsHeader } from '../ColumnsHeader/ColumnsHeader.component';\r\nimport { TitleText } from '../TitleText/TitleText.component';\r\n\r\n/**\r\n * @description If a headerUrl is passed render only it \r\n * as the entire header.  Otherwise render a title header with\r\n * the chosen text or image url and column headers as the chosen\r\n * text.\r\n */\r\nexport function RankingsHeader(props: RankingsHeaderProps) {\r\n\r\n    const headerLayout = ()=>{\r\n        switch(props.selectedHeaderType) {\r\n            case 'titleText': {\r\n                return(<>\r\n                    <TitleText text={props.titleText}/>\r\n                    <ColumnsHeader \r\n                        category={props.category}\r\n                        usersColumnText={props.usersColumnText}  \r\n                        isColumnHeadersTop={props.isColumnHeadersTop}  \r\n                        width={props.layoutWidth} />\r\n                </>);\r\n            }\r\n            case 'titleUrl': {\r\n                return(<>\r\n                    <TitleImg titleUrl={props.titleUrl}/>\r\n                    <ColumnsHeader \r\n                        category={props.category}\r\n                        usersColumnText={props.usersColumnText} \r\n                        isColumnHeadersTop={props.isColumnHeadersTop}  \r\n                        width={props.layoutWidth} />\r\n\r\n                </>);\r\n            } \r\n            case 'headerUrl' : {\r\n                return(<TitleImg titleUrl={props.headerUrl}/>);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            {\r\n                headerLayout()\r\n            } \r\n        </header>\r\n    );\r\n}\r\n","/**\r\n * Accept a value that might be a string or null or undefined and\r\n * convert it to a valid string.\r\n * @param maybeNull The possibly null or undefined string\r\n * @returns The original string if defined, if not the empty string.\r\n */\r\nexport function nullToString(maybeNull?: string): string {\r\n    return (maybeNull === null || maybeNull === undefined)? '' : maybeNull;\r\n}\r\n","import React, { useCallback, useContext, useEffect, useRef, useState, UIEvent } from 'react';\r\nimport './ViewerLayout.css';\r\nimport { RankingsTable } from \"../RankingsTable/RankingsTable.component\";\r\nimport { RankingsHeader } from \"../RankingsHeader/RankingsHeader.component\";\r\nimport { RankingsHeaderProps } from \"../RankingsHeader/RankingsHeader.props\";\r\nimport { ColorsContext } from '../../../../Context/Colors.context';\r\nimport { ViewerLayoutProps } from './ViewerLayout.props';\r\nimport { nullToString } from '../../../../shared/helpers/nullToString';\r\n\r\n/**\r\n * @description The viewer layout component is responsible for orchestrating the\r\n * layout of the entire extension in viewer mode.\r\n * @param props The entire AppState is passed to the layout to divide\r\n * between the headers and the content body.\r\n */\r\nexport function ViewerLayout({config, tableData}: ViewerLayoutProps) {\r\n    /**\r\n     * Track when the column headers should become sticky\r\n     * to the top of the view or should attach themselves to\r\n     * the bottom of the title box.\r\n     */\r\n    const [isColumnHeadersTop, setColumnHeadersTop] = useState(false);\r\n    const [titleHeight, setTitleHeight] = useState(50);\r\n\r\n    /**\r\n     * Hit testing for the column headers.\r\n     */\r\n    const handleScrolling = (event: UIEvent<HTMLDivElement>) => { \r\n        if(!isColumnHeadersTop && \r\n            (event.target as HTMLDivElement).scrollTop >= titleHeight) {\r\n            setColumnHeadersTop(true);\r\n        }\r\n        else if(isColumnHeadersTop && \r\n            (event.target as HTMLDivElement).scrollTop < titleHeight) {\r\n            setColumnHeadersTop(false);\r\n        } \r\n    };\r\n\r\n    /**\r\n     * Determine the width to use for the column headers when\r\n     * they transition to fixed position. \r\n     */\r\n\r\n    //const [layoutWidth, setLayoutWidth] = useState(300);\r\n   \r\n    /**\r\n     * Make props for the header \r\n     */\r\n    const rhProps: RankingsHeaderProps = {\r\n        isColumnHeadersTop: isColumnHeadersTop,\r\n        category: config.categoryText,\r\n        usersColumnText: config.usersColumnText,\r\n        titleText: nullToString(config.titleText),\r\n        titleUrl: nullToString(config.titleUrl),\r\n        headerUrl: nullToString(config.headerUrl),\r\n        layoutWidth: 300, //layoutWidth,\r\n        selectedHeaderType: config.selectedHeaderType,        \r\n        setTitleHeight: setTitleHeight\r\n    }\r\n\r\n    const theme = useContext(ColorsContext);\r\n\r\n    const viewContainer = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(()=>{\r\n        if(viewContainer) {\r\n            viewContainer.current?.style.setProperty(\r\n                \"--scrollbarBG\", theme.background)\r\n            viewContainer.current?.style.setProperty(\r\n                \"--thumbBG\", theme.accent)\r\n        }\r\n    },[viewContainer, theme]);\r\n\r\n    return (\r\n        <div className=\"view-container\"\r\n            ref={viewContainer}\r\n            onScroll={handleScrolling}\r\n            style={{ \r\n                color: theme.text, \r\n                background: theme.background,\r\n            }}>\r\n            <div  \r\n                style={{\r\n                    overflow: \"hidden\" \r\n                }}>\r\n                <RankingsHeader {...rhProps}/>\r\n                <RankingsTable tableData={tableData} />\r\n            </div>\r\n        </div>\r\n        /*</div>*/\r\n    );\r\n}\r\n\r\n/*\r\n        <ColoredScrollbars \r\n            style={{ \r\n                height: \"500px\",\r\n                width: \"320px\", \r\n                overflowX: \"hidden\",\r\n                display: \"block\"\r\n            }} \r\n            thumbColor={theme.accent} \r\n            onScroll={handleScrolling}>\r\n\r\n        </ColoredScrollbars>\r\n\r\n\r\n*/","import React from 'react';\r\nimport './RadioSelectGroup.css';\r\nimport { RadioSelectGroupProps } from \"./RadioSelectGroup.props\";\r\n\r\nexport function RadioSelectGroup<SelectionType>({ \r\n    title, \r\n    groupName, \r\n    items, \r\n    currentSelection, handleSelection }: RadioSelectGroupProps<SelectionType>) {\r\n\r\n    const handleSelect = (selectedValue: SelectionType)=> ()=> {\r\n        handleSelection(selectedValue);\r\n    }\r\n\r\n    const radioButtons = items.map((item,index)=>(\r\n        <div key={index}>\r\n            <input \r\n                type=\"radio\" \r\n                id={`rsw-${index}`} \r\n                name={groupName} \r\n                checked={item.selectionValue === currentSelection}\r\n                onChange={handleSelect(item.selectionValue)}/>\r\n            <label htmlFor={`rsw-${index}`}>{item.label}</label>\r\n        </div>\r\n    ));\r\n\r\n    const contents = items.map((item,)=>(<div>{item.content}</div>));\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"title-container\"><span>{title}</span></h2>\r\n            <div className=\"radio-group-container\">\r\n            \r\n                <div className=\"radio-buttons-container\">\r\n                    {radioButtons}\r\n                </div>\r\n                <div className=\"contents-container\">\r\n                    {contents}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { ConfigModel } from \"../model/Config.model\";\r\n\r\nexport function copyConfig(config: ConfigModel):ConfigModel {\r\n    return {\r\n        ...config,\r\n        themes: {\r\n            dark: {...config.themes.dark},\r\n            light: {...config.themes.light},\r\n        }\r\n    };\r\n}","import { RGBColor } from \"react-color\";\r\n\r\nexport function convertStringToRGBColor(color:string): RGBColor {\r\n    const regexCSSrgba =  /rgba\\((?<r>\\d+),(?<g>\\d+),(?<b>\\d+),(?<a>\\d+)\\)/m;\r\n    const colorsMatch = regexCSSrgba.exec(color);\r\n    const rgbColor: RGBColor = { \r\n        r: Number.parseInt(colorsMatch?.groups?.r || '') || 241, \r\n        g: Number.parseInt(colorsMatch?.groups?.g || '') || 112, \r\n        b: Number.parseInt(colorsMatch?.groups?.b || '') || 19, \r\n        a: Number.parseInt(colorsMatch?.groups?.a || '') || 1\r\n    }\r\n    return rgbColor;\r\n}\r\n\r\nexport function convertRGBColorToString(color:RGBColor): string {\r\n    return `rgb(${color.r},${color.g},${color.b},${color.a})`;\r\n}\r\n","import React, { useState } from 'react';\r\nimport './ColorPickerButton.css';\r\nimport { SketchPicker, ColorResult } from 'react-color';\r\nimport { ColorPickerButtonProps } from './ColorPickerButton.props';\r\nimport { convertStringToRGBColor, convertRGBColorToString } from './ColorPickerButton.helpers';\r\nimport { ColorPickerButtonState } from './ColorPickerButton.state';\r\n\r\nexport function ColorPickerButton(props: ColorPickerButtonProps) {\r\n    const [buttonState, setButtonState] = useState<ColorPickerButtonState>(()=>{\r\n        return { displayColorPicker: false,\r\n        color: convertStringToRGBColor(props.color) };\r\n    });\r\n\r\n    const handleClick = () => {\r\n        setButtonState({\r\n            ...buttonState, \r\n            displayColorPicker: !buttonState.displayColorPicker  \r\n        });\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setButtonState({\r\n            ...buttonState,\r\n            displayColorPicker: false \r\n        });\r\n    };\r\n\r\n    const handleChange = (color: ColorResult) => {\r\n        setButtonState({ \r\n            ...buttonState, \r\n            color: color.rgb\r\n        });\r\n\r\n        if(props.handleChange) {\r\n            props.handleChange(convertRGBColorToString(color.rgb));\r\n        }\r\n    };\r\n\r\n    const selectedColorStyle = { \r\n        backgroundColor: convertRGBColorToString(buttonState.color) \r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div \r\n                className=\"swatch-container\" \r\n                onClick={ handleClick }>\r\n                <div \r\n                    className=\"color-container\" \r\n                    style={selectedColorStyle} />\r\n            </div>\r\n            { \r\n                buttonState.displayColorPicker ? \r\n                    <div className=\"popover-container\" >\r\n                    <div className=\"cover-container\" \r\n                        onClick={ handleClose }/>\r\n                        <SketchPicker \r\n                            color={ buttonState.color } \r\n                            onChange={ handleChange } />\r\n                    </div> : \r\n                    null \r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import './ColorPickerWidget.css';\r\nimport { ColorPickerButton } from '../ColorPickerButton/ColorPickerButton.component';\r\nimport { ColorPickerWidgetProps } from './ColorPickerWidget.props';\r\n\r\nexport function ColorPickerWidget(props: ColorPickerWidgetProps) {\r\n    return (\r\n        <div className=\"color-picker-widget\">\r\n            <label style={{ color: props.labelColor }}>{props.label}</label>\r\n            <ColorPickerButton \r\n                color={props.color} \r\n                handleChange={props.handleColorChange}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './ThemeConfigEditor.css';\r\nimport { ColorPickerWidget } from '../ColorPickerWidget/ColorPickerWidget.component';\r\nimport { ThemeConfigEditorProps } from './ThemeConfigEditor.props';\r\n\r\n\r\nexport function ThemeConfigEditor({ \r\n    title, \r\n    theme, \r\n    colorChangeHandlers }: ThemeConfigEditorProps) {\r\n        \r\n    return (\r\n        <div className=\"colors-container\" \r\n            style={{ \r\n                borderColor: theme.accent, \r\n                backgroundColor: theme.background,\r\n                color: theme.text\r\n            }}>\r\n            <h2 className=\"theme-title\">\r\n                <span>{title}</span>\r\n            </h2>\r\n            <ColorPickerWidget \r\n                label=\"Background Color:\" \r\n                color={theme.background} \r\n                handleColorChange={colorChangeHandlers.background}/>\r\n            <ColorPickerWidget \r\n                label=\"Accent Color:\" \r\n                color={theme.accent} \r\n                labelColor={theme.accent}\r\n                handleColorChange={colorChangeHandlers.accent}/>\r\n            <ColorPickerWidget \r\n                label=\"Text Color:\" \r\n                color={theme.text}\r\n                handleColorChange={colorChangeHandlers.text}/>\r\n            <ColorPickerWidget \r\n                label=\"Secondary Text Color:\" \r\n                color={theme.altText} \r\n                labelColor={theme.altText}\r\n                handleColorChange={colorChangeHandlers.altText}/>            \r\n        </div>\r\n    );\r\n}\r\n","import React, { ChangeEvent, FormEvent, useContext, useEffect, useState } from 'react';\r\nimport './ConfigLayout.css'\r\nimport { RadioSelectGroup } from '../RadioSelectGroup/RadioSelectGroup.component';\r\nimport { ColorsContext } from '../../../../Context/Colors.context';\r\nimport { ConfigModel } from '../../../../Config/model/Config.model';\r\nimport { copyConfig } from '../../../../Config/helpers/copyConfig';\r\nimport { ThemeConfigEditor } from '../ThemeConfigEditor/ThemeConfigEditor.component';\r\nimport { HeaderModel } from '../../../../Config/model/Header.model';\r\nimport { ConfigLayoutProps } from './ConfigLayout.props';\r\nimport { RadioGroupItem } from '../RadioSelectGroup/RadioSelectGroup.props';\r\n\r\nexport function ConfigLayout({config, handleSaveConfig }: ConfigLayoutProps) {\r\n\r\n    const theme = useContext(ColorsContext);\r\n\r\n    const [currentConfig, setConfig] = useState<ConfigModel>(copyConfig(config));\r\n    const [isFormPristine, setFormPristine] = useState(true);\r\n\r\n    useEffect(()=>{\r\n        setConfig(copyConfig(config));\r\n    },[config]);\r\n\r\n    const handleTitleBehaviorSelection = (select: HeaderModel) => {\r\n        setConfig((prevConfig)=>{\r\n            const newConfig = {...prevConfig};\r\n            newConfig.selectedHeaderType = select;\r\n            return newConfig;\r\n        });\r\n        setFormPristine(false);\r\n    }        \r\n\r\n    const handleTitleTextChange = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        setConfig((prevConfig)=>{\r\n            const newConfig = copyConfig(prevConfig);\r\n            newConfig.titleText = e.target.value;\r\n            return newConfig;\r\n        });\r\n        setFormPristine(false);\r\n    };\r\n\r\n    const handleTitleUrlChange = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        setConfig((prevConfig)=>{\r\n            const newConfig = copyConfig(prevConfig);\r\n            newConfig.titleUrl = e.target.value;\r\n            return newConfig;\r\n        });\r\n        setFormPristine(false);\r\n    };\r\n\r\n    const handleHeaderUrlChange = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        setConfig((prevConfig)=>{\r\n            const newConfig = copyConfig(prevConfig);\r\n            newConfig.headerUrl = e.target.value;\r\n            return newConfig;\r\n        });\r\n        setFormPristine(false);\r\n    };\r\n\r\n    const handleDataUrlChange = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        setConfig((prevConfig)=>{\r\n            const newConfig = copyConfig(prevConfig);\r\n            newConfig.dataUrl = e.target.value;\r\n            return newConfig;\r\n        });\r\n        setFormPristine(false);\r\n    };\r\n\r\n    const handleCategoryChange = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        setConfig((prevConfig)=>{\r\n            const newConfig = copyConfig(prevConfig);\r\n            newConfig.categoryText = e.target.value;\r\n            return newConfig;\r\n        });\r\n        setFormPristine(false);\r\n    };\r\n\r\n    const handleUsersColumnTextChange = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        setConfig((prevConfig)=>{\r\n            const newConfig = copyConfig(prevConfig);\r\n            newConfig.usersColumnText = e.target.value;\r\n            return newConfig;\r\n        });\r\n        setFormPristine(false);\r\n    };\r\n\r\n    const colorChangeHandlers = {\r\n        dark: {\r\n            background: (color: string)=>{ \r\n                setConfig((prevConfig)=>{\r\n                    const newConfig = copyConfig(prevConfig);\r\n                    newConfig.themes.dark.background = color;\r\n                    return newConfig;\r\n                });\r\n                setFormPristine(false);\r\n            },\r\n            accent: (color: string)=>{ \r\n                setConfig((prevConfig)=>{\r\n                    const newConfig = copyConfig(prevConfig);\r\n                    newConfig.themes.dark.accent = color;\r\n                    return newConfig\r\n                });\r\n                setFormPristine(false);\r\n            },\r\n            text: (color: string)=>{ \r\n                setConfig((prevConfig)=>{\r\n                    const newConfig = copyConfig(prevConfig);\r\n                    newConfig.themes.dark.text = color;\r\n                    return newConfig;\r\n                });\r\n                setFormPristine(false);\r\n            },\r\n            altText: (color: string)=>{ \r\n                setConfig((prevConfig)=>{\r\n                    const newConfig = copyConfig(prevConfig);\r\n                    newConfig.themes.dark.altText = color;\r\n                    return newConfig;\r\n                });\r\n                setFormPristine(false);\r\n            },\r\n        },\r\n        light: {\r\n            background: (color: string)=>{ \r\n                setConfig((prevConfig)=>{\r\n                    const newConfig = copyConfig(prevConfig);\r\n                    newConfig.themes.light.background = color;\r\n                    return newConfig;\r\n                });\r\n                setFormPristine(false);\r\n            },\r\n            accent: (color: string)=>{ \r\n                setConfig((prevConfig)=>{\r\n                    const newConfig = copyConfig(prevConfig);\r\n                    newConfig.themes.light.accent = color;\r\n                    return newConfig;\r\n                });\r\n                setFormPristine(false);\r\n            },\r\n            text: (color: string)=>{ \r\n                setConfig((prevConfig)=>{\r\n                    const newConfig = copyConfig(prevConfig);\r\n                    newConfig.themes.light.text = color;\r\n                    return newConfig;\r\n                });\r\n                setFormPristine(false);\r\n            },\r\n            altText: (color: string)=>{ \r\n                setConfig((prevConfig)=>{\r\n                    const newConfig = copyConfig(prevConfig);\r\n                    newConfig.themes.light.altText = color;\r\n                    return newConfig;\r\n                });\r\n                setFormPristine(false);\r\n            },\r\n        }\r\n    }\r\n    \r\n    const handleSubmit = (event: FormEvent) => {\r\n        handleSaveConfig(currentConfig);\r\n        setFormPristine(true);\r\n        event.preventDefault();\r\n    }\r\n\r\n    const ColorsRadioGroupContent: RadioGroupItem<HeaderModel>[] = [{\r\n        content: (<input\r\n                    className=\"radio-group-input\" \r\n                    value={currentConfig.titleText} \r\n                    onChange={handleTitleTextChange}/>),\r\n        label: \"Title Text:\",\r\n        selectionValue: 'titleText'\r\n    },\r\n    {\r\n        content: (<input \r\n                    className=\"radio-group-input\" \r\n                    value={currentConfig.titleUrl} \r\n                    onChange={handleTitleUrlChange}/>),\r\n        label: \"Title Url:\",\r\n        selectionValue: 'titleUrl'\r\n    },\r\n    {\r\n        content: (<input \r\n                    className=\"radio-group-input\" \r\n                    value={currentConfig.headerUrl} \r\n                    onChange={handleHeaderUrlChange}/>),\r\n        label: \"Header Url:\",\r\n        selectionValue: 'headerUrl'\r\n    }]; \r\n\r\n    return (\r\n        <div className=\"config-layout\" \r\n            style={{ background: theme.background, color: theme.text }}>\r\n            <form onSubmit={handleSubmit}>\r\n                <h1>\r\n                    <span>User Rankings Configuration</span>\r\n                    <div style={{ height: \"30px\"}}>\r\n                        <button className=\"submit\" \r\n                            style={{\r\n                            background: isFormPristine?\"#cccccc\":theme.accent, \r\n                            color: isFormPristine?\"#666666\":theme.text,\r\n                        }}\r\n                        disabled={isFormPristine}\r\n                        type=\"submit\">\r\n                            Save Config\r\n                        </button>\r\n                    </div>\r\n                </h1>\r\n                <div className=\"theme-editors\">\r\n                    <ThemeConfigEditor \r\n                            title=\"Dark Mode Theme\"\r\n                            theme={currentConfig.themes.dark}\r\n                            colorChangeHandlers={colorChangeHandlers.dark}/>\r\n                    <ThemeConfigEditor \r\n                            title=\"Light Mode Theme\"\r\n                            theme={currentConfig.themes.light}\r\n                            colorChangeHandlers={colorChangeHandlers.light}/>\r\n                </div>\r\n                \r\n                <div className=\"fields-container\">\r\n                    <h2 className=\"data-title-container\">\r\n                        <span>Data Behavior</span>\r\n                    </h2>\r\n                    <div className=\"data-container\">\r\n                        <div className=\"data-labels\">\r\n                            <label>Data Url:</label>\r\n                            <label>Ranking Category:</label>\r\n                            <label>Users Column Text:</label>\r\n                        </div>\r\n                        <div className=\"data-inputs\">\r\n                            <input \r\n                                value={currentConfig.dataUrl} \r\n                                onChange={handleDataUrlChange}/>\r\n                            <input \r\n                                value={currentConfig.categoryText} \r\n                                onChange={handleCategoryChange}/>\r\n                            <input \r\n                                value={currentConfig.usersColumnText} \r\n                                onChange={handleUsersColumnTextChange}\r\n                                />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <RadioSelectGroup\r\n                        title=\"Header Behavior\"\r\n                        groupName=\"header-behavior\" \r\n                        items={ColorsRadioGroupContent}\r\n                        handleSelection={handleTitleBehaviorSelection}\r\n                        currentSelection={currentConfig.selectedHeaderType}/>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport './TabSelector.css';\r\nimport { TabSelectorProps } from \"./TabSelector.props\";\r\n\r\nexport function TabSelector({ color, toggledColor, text, isSelected, handleSelected }: TabSelectorProps) {\r\n\r\n    const [buttonStyle, setButtonStyle] = useState({\r\n        color: color,\r\n    });\r\n\r\n    const handleMouseEnter = ()=>{\r\n        if(!isSelected) {\r\n            setButtonStyle({ color: toggledColor });\r\n        }\r\n    };\r\n\r\n    const handleDataMouseLeave = ()=>{\r\n        if(!isSelected) {\r\n            setButtonStyle({ color: color });\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        isSelected?\r\n            setButtonStyle({ color: toggledColor }):\r\n            setButtonStyle({ color: color });\r\n    },[isSelected]);\r\n\r\n    const handleClick = ()=>{ handleSelected(text); };\r\n\r\n    return (\r\n        <a  className=\"tab\"\r\n            style={buttonStyle}\r\n            onClick={handleClick}\r\n            onMouseEnter={handleMouseEnter} \r\n            onMouseLeave={handleDataMouseLeave}>\r\n            {text}\r\n        </a>\r\n    );\r\n}","import React, { useContext, useMemo, useState } from 'react';\r\nimport './TabSelectors.css';\r\nimport { TabSelectorsProps } from './TabSelectors.props'\r\nimport { ColorsContext } from '../../../Context/Colors.context';\r\nimport { TabSelector } from '../TabSelector/TabSelector.component';\r\n\r\nexport function TabSelectors({tabs}: TabSelectorsProps) {\r\n    const theme = useContext(ColorsContext);\r\n\r\n    const tabNames = useMemo(()=>{\r\n        return Object.keys(tabs);\r\n    },[tabs])\r\n\r\n    const [selectedTab,setSelectedTab] = useState(()=>{\r\n        return tabNames.length > 0?\r\n            tabNames[0]:\r\n            ''\r\n    });\r\n    \r\n    const tabSelectors = tabNames.map(name=>(\r\n        <TabSelector\r\n            key={name} \r\n            text={name} \r\n            color={theme.text} \r\n            toggledColor={theme.accent}\r\n            isSelected={name===selectedTab}\r\n            handleSelected={(tabName:string)=>{ setSelectedTab(tabName) }}/>\r\n    ));\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"tabs\" \r\n                style={{ borderColor: theme.accent }}>\r\n                {tabSelectors}\r\n            </div>\r\n            <div className=\"content\">{tabs[selectedTab]}</div>\r\n        </>\r\n    );\r\n}","import './ColoredScrollbar.css';\r\nimport { Component } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars-2';\r\nimport { ColoredScrollbarProps } from './ColoredScrollbar.props';\r\nimport { ColoredScrollbarState } from './ColoredScrollbar.state';\r\n\r\n/**\r\n * @class ColoredScrollbars\r\n * @description extends Scrollbars to customize the color\r\n * of the scroll widget.\r\n */\r\nexport class ColoredScrollbars extends \r\n    Component<ColoredScrollbarProps, ColoredScrollbarState> {\r\n\r\n    constructor(props: ColoredScrollbarProps) {\r\n        super(props);\r\n        this.state = { top: 0 };\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.renderView = this.renderView.bind(this);\r\n        this.renderThumb = this.renderThumb.bind(this);\r\n    }\r\n\r\n    handleUpdate(values: ColoredScrollbarState) {\r\n        const { top } = values;\r\n        this.setState({ top });\r\n    }\r\n\r\n    renderView({ style, ...props }: ColoredScrollbarProps) {\r\n        return (\r\n            <div\r\n                style={{ ...style, overflowX:\"hidden\" }}\r\n                {...props}/>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * The scrollbar class implements the desired look and feel\r\n     */\r\n    renderThumb({ style, ...props }: ColoredScrollbarProps) {\r\n        return (\r\n            <div className=\"scrollbar\"\r\n                style={{ ...style, backgroundColor: this.props.thumbColor }}\r\n                {...props}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {thumbColor, ...props} = this.props;\r\n        return (\r\n            <Scrollbars\r\n                renderView={this.renderView}\r\n                renderThumbHorizontal={this.renderThumb}\r\n                renderThumbVertical={this.renderThumb}\r\n                onUpdate={this.handleUpdate}\r\n                {...props}/>\r\n        );\r\n    }\r\n}","import React, { useCallback, useRef } from 'react';\r\nimport './EditTableEntry.css';\r\nimport { EditTableEntryProps } from './EditTableEntry.props';\r\n\r\nexport function EditTableEntry({username, value, gotoUserEntry}: EditTableEntryProps) {\r\n    const valueInputRef = useRef(null);\r\n\r\n    const focusValue = useCallback(()=>{\r\n        if(username===gotoUserEntry) {\r\n            if(valueInputRef && valueInputRef.current) {\r\n                (valueInputRef.current as any).focus();\r\n            }\r\n        }    \r\n    },[username,gotoUserEntry,valueInputRef]);\r\n\r\n    focusValue();\r\n \r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <div style={{ display: \"inline-block\", paddingRight: \"2px\"  }}>\r\n                <input defaultValue={username}/>\r\n            </div>\r\n            <div style={{ display: \"inline-block\", paddingLeft: \"2px\" }}>\r\n                <input ref={valueInputRef} defaultValue={value}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport './EditDataTable.css';\r\nimport { EditDataTableProps } from './EditDataTable.props';\r\nimport { ColorsContext } from '../../../../Context/Colors.context';\r\nimport { ColoredScrollbars } from '../../../../shared/components/ColoredScrollbar/ColoredScrollbar.component';\r\nimport { EditTableEntry } from '../EditTableEntry/EditTableEntry.component';\r\n\r\nexport function EditDataTable({tableData, config, gotoUserEntry}: EditDataTableProps) {\r\n    const theme = useContext(ColorsContext);\r\n    \r\n    const entries = tableData.entries?.map((entry)=>(\r\n        <EditTableEntry\r\n            key={entry.username}\r\n            {...entry}\r\n            gotoUserEntry={gotoUserEntry} \r\n        />));\r\n\r\n    return (\r\n        <ColoredScrollbars \r\n            style={{ height: 500, color: theme.text, background: theme.background }} \r\n            thumbColor={theme.accent} \r\n            onScroll={()=>{}}>\r\n            <form>\r\n                <div className=\"entries\">\r\n                    <span style={{ \r\n                        display: \"flex\", \r\n                        justifyContent: \"center\",\r\n                        fontSize: \"1em\" }}>\r\n                        <div style={{ \r\n                            width: \"165px\",\r\n                            textAlign: \"center\",\r\n                            display: \"inline-block\", \r\n                            paddingRight: \"2px\"  }}>\r\n                            <label style={{ }}>{config.usersColumnText}</label>\r\n                        </div>\r\n                        <div style={{ \r\n                            width: \"165px\",\r\n                            textAlign: \"center\",\r\n                            display: \"inline-block\", \r\n                            paddingLeft: \"2px\"  }}>\r\n                            <label style={{  }}>{config.categoryText}</label>\r\n                        </div>\r\n                    </span>\r\n                    {entries}\r\n                </div>\r\n            </form>\r\n        </ColoredScrollbars>\r\n    );\r\n}\r\n","import React, { KeyboardEvent, useContext, useRef, useState } from 'react';\r\nimport './DashboardLayout.css';\r\nimport { DashboardLayoutProps } from './DashboardLayout.props';\r\nimport { ColorsContext } from '../../../../Context/Colors.context';\r\nimport { TabSelectors } from '../../../../shared/components/TabSelectors/TabSelectors.component';\r\nimport { EditDataTable } from '../EditDataTable/EditDataTable.component';\r\n\r\nexport function DashboardLayout({config, tableData}: DashboardLayoutProps) {\r\n    const theme = useContext(ColorsContext);\r\n\r\n    const [gotoState, setGotoState] = useState<string>('');\r\n    const gotoInput = useRef(null);\r\n        \r\n    const handleGoTo = () => {\r\n        setGotoState((gotoInput?.current as any).value);\r\n    };\r\n\r\n    const handleFindUser = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key === 'Enter') {\r\n            setGotoState((e.target as HTMLInputElement).value);\r\n        }\r\n    };\r\n\r\n    const handleFindUserFocus = ()=>{ setGotoState('') };\r\n\r\n    const tabs={\r\n            \"Data\":(\r\n                <>\r\n                    <div>\r\n                        <input type=\"text\"\r\n                            onFocus={handleFindUserFocus}\r\n                            onKeyPress={handleFindUser}\r\n                            ref={gotoInput} \r\n                            placeholder=\"Username\"\r\n                            defaultValue={gotoState}/>\r\n                        <button onClick={handleGoTo}>Go To</button>\r\n                    </div>\r\n                    <EditDataTable\r\n                        gotoUserEntry={gotoState} \r\n                        tableData={tableData}\r\n                        config={config}/>\r\n                </>),\r\n            \"Events\":(<>Events</>)};\r\n\r\n    return (\r\n        <div className=\"dashboard-layout\" \r\n            style={{\r\n                backgroundColor: theme.background, \r\n                color: theme.text\r\n            }}>\r\n            <h1 className=\"dashboard-header\">\r\n                <span>User Rankings</span>\r\n            </h1>\r\n            \r\n\r\n            <div className=\"container\">\r\n                <TabSelectors tabs={tabs}/>                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","export const defaultAuthToken: Twitch.ext.Authorized = {\r\n    channelId: \"\", clientId: \"\", token: \"\", userId: \"\"\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { registerTwitchExtContextHandlers } from \"../services/TwitchContext/TwitchContext.service\";\r\n\r\nexport type ViewModes = 'viewer' | 'dashboard' | 'config';\r\nexport type Themes = 'light' | 'dark';\r\n\r\nexport function useTwitchContext({mode, theme}: {mode: ViewModes, theme: Themes}):[Themes, ViewModes] {\r\n\r\n    const [twitchTheme, setTwitchTheme] = useState<Themes>(theme);\r\n    const [extensionMode, setExtensionMode] = useState<ViewModes>(mode);\r\n\r\n    useEffect(()=>{\r\n        registerTwitchExtContextHandlers({\r\n            theme:(newTheme)=>setTwitchTheme(newTheme),\r\n            mode:(newMode)=>setExtensionMode(newMode)\r\n        });\r\n    },[]);\r\n\r\n    return [twitchTheme,extensionMode]\r\n}\r\n","export type TwitchContextCallback<C,K extends keyof C> = (context: C,changed: readonly K[])=>void;\r\n\r\n/**\r\n * Extract the possible values of a twitch context entry\r\n * and allow a context key to be mapped to a callback \r\n * whose parameter is the extracted possible values.\r\n */\r\nexport type TwitchContextHandlerMap<C> =\r\n{ [K in keyof C]: <V extends NonNullable<C[K]>>(val:V)=>void }\r\n\r\nfunction isNotNull<T>(val: T | null): val is NonNullable<T> {\r\n    if (val === null || val === undefined ) {\r\n      return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const handleTwitchExtContextChanges =\r\n    <C, K extends keyof C>\r\n    (handlers: TwitchContextHandlerMap<C>): TwitchContextCallback<C,K> => \r\n        (context, changed) => {\r\n            changed.forEach(key=>{\r\n                if(handlers[key]) {\r\n                    const val = context[key];\r\n                    if(isNotNull(val)) {\r\n                        handlers[key](val);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\nexport function registerTwitchExtContextHandlers\r\n    <C extends Partial<Twitch.ext.Context>>\r\n        (handlers: TwitchContextHandlerMap<C>) {\r\n            const contextCallback = handleTwitchExtContextChanges(handlers);\r\n            // small hack because the typings suck\r\n            window.Twitch.ext.onContext(contextCallback as any);\r\n}\r\n\r\nexport function registerTwitchExtConfigHandler(callback:()=>void) {\r\n    window.Twitch.ext.configuration.onChanged(callback);\r\n}\r\n\r\nexport function registerTwitchExtErrorHandler(errorCallback:(error: any)=>void) {\r\n    window.Twitch.ext.onError(errorCallback);\r\n}","import { useEffect, useMemo } from \"react\";\r\nimport { AuthState } from \"../state/AuthState.state\";\r\nimport { useTwitchExtAuth } from \"./TwitchExtAuth.hook\";\r\nimport { IsConfigTester, TwitchConfigSetter, useTwitchExtConfig } from \"./TwitchExtConfig.hook\";\r\nimport { Themes, useTwitchContext, ViewModes } from \"./TwitchExtContext.hook\";\r\n\r\nconst listenBroadcast = (target: string, content: string, message: string)=>{\r\n    const msg = JSON.parse(message);\r\n    window.Twitch.ext.rig.log(\"channel message: \" + msg);\r\n    if(msg.event) {\r\n\r\n    }\r\n}\r\n\r\nexport function useTwitchPanelExtension<Config>({mode, defaultConfig, isConfig}: {\r\n    mode: ViewModes,\r\n    defaultConfig: Config, \r\n    isConfig: IsConfigTester<Config>\r\n}): \r\n    [AuthState, Config, TwitchConfigSetter<Config>, Themes, ViewModes, boolean] {\r\n    const [theme, viewMode] = useTwitchContext({mode, theme: 'dark'});\r\n    const authState = useTwitchExtAuth();\r\n    const [twitchConfig,saveTwitchConfig] = useTwitchExtConfig<Config>({defaultConfig, isConfig});\r\n\r\n    const isLoading = useMemo(\r\n        () => {\r\n          return !(authState.isAuthed && !!twitchConfig);\r\n        },\r\n        [authState, twitchConfig],\r\n    );\r\n\r\n    useEffect(()=>{\r\n        const twitchExt = window.Twitch.ext;\r\n        if(authState.isAuthed){\r\n            twitchExt.rig.log('listening');\r\n            twitchExt.listen('broadcast',listenBroadcast);\r\n        }\r\n        return ()=>{twitchExt.unlisten('broadcast',listenBroadcast);};\r\n    \r\n    },[authState])\r\n\r\n    return [\r\n        authState, \r\n        twitchConfig,\r\n        saveTwitchConfig,\r\n        theme, \r\n        viewMode,\r\n        isLoading\r\n    ];\r\n}","import { useEffect, useState } from \"react\";\r\nimport { decode } from 'jsonwebtoken';\r\nimport { DecodedTwitchToken } from \"../models/DecodedTwitchToken.model\";\r\nimport { AuthState } from \"../state/AuthState.state\";\r\nimport { modCheck } from \"../helpers/modCheck\";\r\nimport { defaultAuthToken } from \"../defaults/authToken\";\r\n\r\nexport function useTwitchExtAuth(): AuthState {\r\n    const [authState,setAuthState] = useState<AuthState>({\r\n        token: defaultAuthToken,\r\n        isMod: false,\r\n        isAuthed: false\r\n    });\r\n    \r\n    useEffect(()=>{\r\n        const twitchExt = window.Twitch.ext;\r\n        twitchExt.onAuthorized((auth)=>{\r\n            try {\r\n                const decodedToken: DecodedTwitchToken = \r\n                    decode(auth.token) as DecodedTwitchToken;\r\n                \r\n                if(decodedToken) {\r\n                    setAuthState({\r\n                        token: auth,\r\n                        isMod: modCheck(decodedToken.role),\r\n                        isAuthed: !!auth.token && !!decodedToken.opaque_user_id\r\n                    });\r\n                }\r\n            }\r\n            catch {\r\n                setAuthState({\r\n                    token: defaultAuthToken,\r\n                    isMod: false,\r\n                    isAuthed: false\r\n                });\r\n            }\r\n        })\r\n    },[]);\r\n\r\n    return authState;\r\n}","export const modCheck = (role: string)=>role === 'broadcaster' || role === 'moderator';","import { useEffect, useState } from \"react\";\r\n\r\nexport type TwitchConfigSetter<Config> = ({config, version}: {config: Config, version?: string}) =>void;\r\nexport type IsConfigTester<Config> = (config:Config)=> config is Config;\r\n\r\nexport function useTwitchExtConfig<Config>({\r\n    defaultConfig, \r\n    isConfig \r\n}:\r\n{\r\n    isConfig: IsConfigTester<Config>, \r\n    defaultConfig: Config\r\n}): [Config, TwitchConfigSetter<Config>] {\r\n\r\n    const [twitchConfig, setTwitchConfig] = useState<Config>(defaultConfig);\r\n    \r\n    useEffect(()=>{\r\n        const twitchExt = window.Twitch.ext;\r\n        twitchExt.configuration.onChanged(()=>{\r\n            if(twitchExt.configuration.broadcaster && \r\n                twitchExt.configuration.broadcaster.content) {\r\n                    const maybeConfig = JSON.parse(twitchExt.configuration.broadcaster.content);\r\n                    if(isConfig(maybeConfig)) {\r\n                        setTwitchConfig(maybeConfig);        \r\n                    }\r\n            }\r\n        });\r\n    },[]);\r\n\r\n    const saveConfig = ({config, version=\"\"}: {config: Config, version?: string}) => {\r\n        const twitchExt = window.Twitch.ext;\r\n        twitchExt.configuration.set(\r\n            \"broadcaster\",\r\n            version,\r\n            JSON.stringify(config));\r\n    }\r\n\r\n    return [twitchConfig, saveConfig];\r\n}","import { ConfigModel } from \"../model/Config.model\";\r\nimport { defaultColorModesConfig } from './ColorModesConfig';\r\n\r\nexport const defaultConfigState: ConfigModel = {\r\n    dataUrl: '',\r\n    selectedHeaderType: 'titleText',\r\n    usersColumnText: 'Username',\r\n    titleText: 'Default Title',\r\n    categoryText: 'Default Category',\r\n    themes: defaultColorModesConfig\r\n}","import { ConfigModel } from \"../model/Config.model\";\r\n\r\nexport function isAConfig(config: any): config is ConfigModel {\r\n    return config?.selectedHeaderType\r\n        && config?.themes?.dark\r\n        && config?.themes?.light;\r\n}","import React, { useEffect, useState } from 'react';\n//import axios from 'axios';\nimport './App.css';\nimport { TableData } from './App.state';\nimport { Loading } from './Views/Loading/Loading.component';\nimport { ViewerLayout } from './Views/Viewer/components/ViewerLayout/ViewerLayout.component';\nimport { ConfigLayout } from './Views/Config/components/ConfigLayout/ConfigLayout.component';\nimport { DashboardLayout } from './Views/Dashboard/components/DashboardLayout/DashboardLayout.component';\nimport { ColorsContext, modes } from './Context/Colors.context';\nimport { useTwitchPanelExtension } from './shared/hooks/TwitchPanelExtension.hook';\nimport { ViewModes } from './shared/hooks/TwitchExtContext.hook';\nimport { ConfigModel } from './Config/model/Config.model';\nimport { DataState } from './shared/data/data.state';\nimport { defaultConfigState } from './Config/defaults/ConfigState';\nimport { isAConfig } from './Config/helpers/isAConfig';\n\nconst defaultTableData: TableData = { tableData: { entries: [] } };\n\nfunction App() {\n\n    let initialMode: ViewModes = \"viewer\";\n    switch(window.location.pathname){\n        case \"\": { initialMode = \"viewer\"; break; }\n        case \"/index.html\": { initialMode = \"viewer\"; break; }\n        case \"/config\": { initialMode = \"config\"; break; }\n        case \"/config.html\": { initialMode = \"config\"; break; }\n        case \"/dashboard\": { initialMode = \"dashboard\"; break; }\n        case \"/dashboard.html\": { initialMode = \"dashboard\"; break; }\n    }\n\n    const [data, setData] = useState<TableData>(defaultTableData);\n    const [url, setUrl] = useState('/config/user-bits.json');\n    const [auth, config, saveConfig, theme, mode, isLoading] =  \n        useTwitchPanelExtension({\n            mode: initialMode, \n            defaultConfig: defaultConfigState, \n            isConfig: isAConfig });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            //setIsLoading(true);\n\n            //await sleep(1000);\n\n            const result = await Promise.resolve<DataState>(\n                require(\"./test/giftedSubs.test.json\")\n            );\n\n            setData({ \n                tableData: result\n            });\n            //setIsLoading(false);\n        };\n\n        fetchData();\n    }, [url]);\n\n    const handleSaveConfig = (newConfig: ConfigModel) => {\n        saveConfig({config: newConfig})\n    }\n\n    const renderLayout = (layoutMode: ViewModes, renderConfig: ConfigModel) => {\n        switch(layoutMode) {\n            case 'config': { return (\n                <ConfigLayout \n                    config={renderConfig} \n                    handleSaveConfig={handleSaveConfig}/>\n            )}\n            case 'dashboard': { return (\n                <DashboardLayout \n                    config={renderConfig}\n                    tableData={data.tableData}/>\n            )}\n            case 'viewer': { return (\n                <ViewerLayout \n                    config={renderConfig} \n                    tableData={data.tableData}/>\n            )}\n        }\n    }\n\n    return (\n        <ColorsContext.Provider value={modes[theme]}>\n            <div className={`app-container`}>\n            {\n                false? \n                    <Loading/>:\n                    renderLayout(mode, config)\n            }\n            </div>\n        </ColorsContext.Provider>\n    );\n}\n\n\nfunction sleep(ms: number) {\n// add ms millisecond timeout before promise resolution\nreturn new Promise(resolve => setTimeout(resolve, ms))\n}\n\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}